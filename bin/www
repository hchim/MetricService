#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var commonUtils = require('servicecommonutils');
var LogUploader = commonUtils.LogUploader;
var http = require('http');
var conf = require("../config");
var Scheduler = require('../utils/monitoring/Scheduler');

var port = conf.get('server.port');
var ip = conf.get("server.ip");
var env = conf.get('env');
var winston = commonUtils.getWinston(env);

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, ip);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      winston.log('error', bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      winston.log('error', bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    winston.log('info', "Running MetricService in " + env + " mode.")
    winston.log('info', 'Running on http://' + addr.address + ":" + addr.port);

    // connect to database
    commonUtils.connectDB(conf);

    //create log uploader
    new LogUploader(24 * 60 * 60 * 1000, __dirname + '/../log/', conf).start()

    //init scheduler
    new Scheduler().start();
}